# WebRTC SIP Client Chrome Extension

## Project Overview
This project is a Chrome extension that provides a WebRTC-based SIP client for making and receiving voice calls directly from the browser. It uses the SIP.js library to handle SIP protocol communication and WebRTC for media handling.

## Features
- SIP registration and authentication
- Making outbound calls
- Receiving inbound calls
- Basic call controls (answer, reject, hang up)
- Connection status display with visual indicators
- Chrome extension integration with storage and permissions APIs
- Automatic microphone permission handling
- Persistent settings across browser sessions
- Collapsible connection settings section
- Minimalist, compact UI design
- Enhanced error handling and logging

## Directory Structure
- `/` - Root directory containing the main application files
  - `manifest.json` - Chrome extension manifest file
  - `popup.html` - The main extension popup interface
  - `background.html` - Background page for the extension
  - `/js` - JavaScript files
    - `popup.js` - UI logic for the popup interface
    - `background.js` - Background script for handling SIP communication
    - `sip.js` - SIP.js library for WebRTC SIP functionality
  - `/css` - Stylesheets
    - `style.css` - Styling for the extension UI
  - `/icons` - Directory containing extension icons
    - `icon16.png` - 16x16 icon for the extension
  - `/.augment` - Project documentation and management
    - `augment-guidelines` - Workflow guidelines for the project
    - `augment-tasklist` - Task tracking for the project
    - `augment-chathistory` - History of development conversations
    - `augment-README` - Comprehensive project documentation

## Prerequisites
- Google Chrome browser
- A SIP account with a SIP server that supports WebSocket connections
- Microphone access permissions

## Installation
1. Clone or download this repository
2. Open Chrome and navigate to `chrome://extensions/`
3. Enable "Developer mode" (toggle in the top-right corner)
4. Click "Load unpacked" and select the directory containing this extension

## Configuration
The extension requires the following configuration:
- SIP Server: The domain of your SIP server
- WebSocket URL: The WebSocket endpoint of your SIP server (typically wss://server:port/ws)
- Username: Your SIP account username
- Password: Your SIP account password
- Display Name: Your name to display to others (optional)

## Usage
1. Click on the extension icon in Chrome to open the popup
2. The Connection Settings section will be expanded if you're not connected
3. Enter your SIP server details and credentials
4. Click "Connect" to register with the SIP server
5. Once connected, the Connection Settings section will automatically collapse
6. Make calls by entering a destination and clicking "Call"
7. For incoming calls, use the "Answer" or "Reject" buttons
8. End active calls with the "Hang Up" button
9. The connection status is indicated by a colored dot (green for connected, red for disconnected)
10. Connection settings can be accessed again by clicking on the Connection Settings header

## Key Files
- `popup.html`: Contains the user interface elements for the extension popup
- `popup.js`: Contains the UI logic and event handling for the popup interface
- `background.js`: Contains the core functionality for SIP communication, including:
  - Connection management
  - Call handling
  - State management
  - Event handling for SIP events
- `style.css`: Contains all styling for the extension UI

## Key Functions
### Background Script (background.js)
- `connect()`: Establishes connection to the SIP server
- `register()`: Registers the user with the SIP server
- `makeCall()`: Initiates an outbound call to a specified destination
- `answer()`: Answers an incoming call
- `reject()`: Rejects an incoming call
- `hangup()`: Ends the current call
- `disconnect()`: Unregisters from the SIP server and closes the connection
- `handleSessionStateChange()`: Manages SIP session state changes
- `updateConnectionState()`: Updates and broadcasts the connection state

### Popup Script (popup.js)
- `setupCollapsibleSections()`: Sets up the collapsible UI sections
- `updateUIFromState()`: Updates the UI based on the current connection state
- `updateButtonState()`: Updates button states based on call status
- `loadSavedSettings()`: Loads saved settings from Chrome storage

## Pending Features
- Password persistence across sessions
- Auto-filling WebSocket URL based on SIP Server input
- Additional icon sizes (48px and 128px)
- Browser notifications for incoming calls with audio alerts
- Automated testing for extension functionality
- Packaging for distribution

## Recent Improvements
- Minimalist UI design with smaller headings and reduced visual clutter
- Ultra-compact window size (reduced by over 40% from original)
- Tighter spacing with reduced margins throughout the interface
- Removed dividers for a cleaner, more modern look
- Centered text alignment throughout the interface for visual harmony
- Centered buttons and form elements for balanced appearance
- Removed colons from form labels for cleaner appearance
- Removed unnecessary help text and placeholder suggestions to reduce visual noise
- Status section moved to the bottom for a more logical information flow
- Username and connection status displayed side-by-side in the center
- Call status displayed under call controls for contextual relevance
- Settings section at the bottom for better focus on call controls
- Renamed "Connection Settings" to "Settings" for a more generic approach
- Collapsible settings section that auto-hides when connected
- Compact Settings button that fits tightly around the text
- Logical form field ordering with display name under username
- Automatic display name generation from username
- Automatic WebSocket URL generation from SIP server domain
- Browser notifications for incoming calls with audio alerts
- Removed non-functional Reject button for better reliability
- Enhanced error handling and detailed logging for troubleshooting
- Improved handling of BYE packets for call termination
- Fixed issues with incoming call detection and handling
- Persistent popup during call operations

## Known Issues
- Microphone access may be denied, requiring proper permissions setup
- The extension includes a key file that should be removed for distribution
